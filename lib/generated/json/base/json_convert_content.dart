// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:uk_city_planner/models/nightlife/nightlife_model_entity.dart';
import 'package:uk_city_planner/generated/json/nightlife_model_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case NightlifeModelEntity:
				return nightlifeModelEntityFromJson(data as NightlifeModelEntity, json) as T;
			case NightlifeModelResults:
				return nightlifeModelResultsFromJson(data as NightlifeModelResults, json) as T;
			case NightlifeModelResultsGeometry:
				return nightlifeModelResultsGeometryFromJson(data as NightlifeModelResultsGeometry, json) as T;
			case NightlifeModelResultsGeometryLocation:
				return nightlifeModelResultsGeometryLocationFromJson(data as NightlifeModelResultsGeometryLocation, json) as T;
			case NightlifeModelResultsGeometryViewport:
				return nightlifeModelResultsGeometryViewportFromJson(data as NightlifeModelResultsGeometryViewport, json) as T;
			case NightlifeModelResultsGeometryViewportNortheast:
				return nightlifeModelResultsGeometryViewportNortheastFromJson(data as NightlifeModelResultsGeometryViewportNortheast, json) as T;
			case NightlifeModelResultsGeometryViewportSouthwest:
				return nightlifeModelResultsGeometryViewportSouthwestFromJson(data as NightlifeModelResultsGeometryViewportSouthwest, json) as T;
			case NightlifeModelResultsOpeningHours:
				return nightlifeModelResultsOpeningHoursFromJson(data as NightlifeModelResultsOpeningHours, json) as T;
			case NightlifeModelResultsPhotos:
				return nightlifeModelResultsPhotosFromJson(data as NightlifeModelResultsPhotos, json) as T;
			case NightlifeModelResultsPlusCode:
				return nightlifeModelResultsPlusCodeFromJson(data as NightlifeModelResultsPlusCode, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case NightlifeModelEntity:
				return nightlifeModelEntityToJson(data as NightlifeModelEntity);
			case NightlifeModelResults:
				return nightlifeModelResultsToJson(data as NightlifeModelResults);
			case NightlifeModelResultsGeometry:
				return nightlifeModelResultsGeometryToJson(data as NightlifeModelResultsGeometry);
			case NightlifeModelResultsGeometryLocation:
				return nightlifeModelResultsGeometryLocationToJson(data as NightlifeModelResultsGeometryLocation);
			case NightlifeModelResultsGeometryViewport:
				return nightlifeModelResultsGeometryViewportToJson(data as NightlifeModelResultsGeometryViewport);
			case NightlifeModelResultsGeometryViewportNortheast:
				return nightlifeModelResultsGeometryViewportNortheastToJson(data as NightlifeModelResultsGeometryViewportNortheast);
			case NightlifeModelResultsGeometryViewportSouthwest:
				return nightlifeModelResultsGeometryViewportSouthwestToJson(data as NightlifeModelResultsGeometryViewportSouthwest);
			case NightlifeModelResultsOpeningHours:
				return nightlifeModelResultsOpeningHoursToJson(data as NightlifeModelResultsOpeningHours);
			case NightlifeModelResultsPhotos:
				return nightlifeModelResultsPhotosToJson(data as NightlifeModelResultsPhotos);
			case NightlifeModelResultsPlusCode:
				return nightlifeModelResultsPlusCodeToJson(data as NightlifeModelResultsPlusCode);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (NightlifeModelEntity).toString()){
			return NightlifeModelEntity().fromJson(json);
		}
		if(type == (NightlifeModelResults).toString()){
			return NightlifeModelResults().fromJson(json);
		}
		if(type == (NightlifeModelResultsGeometry).toString()){
			return NightlifeModelResultsGeometry().fromJson(json);
		}
		if(type == (NightlifeModelResultsGeometryLocation).toString()){
			return NightlifeModelResultsGeometryLocation().fromJson(json);
		}
		if(type == (NightlifeModelResultsGeometryViewport).toString()){
			return NightlifeModelResultsGeometryViewport().fromJson(json);
		}
		if(type == (NightlifeModelResultsGeometryViewportNortheast).toString()){
			return NightlifeModelResultsGeometryViewportNortheast().fromJson(json);
		}
		if(type == (NightlifeModelResultsGeometryViewportSouthwest).toString()){
			return NightlifeModelResultsGeometryViewportSouthwest().fromJson(json);
		}
		if(type == (NightlifeModelResultsOpeningHours).toString()){
			return NightlifeModelResultsOpeningHours().fromJson(json);
		}
		if(type == (NightlifeModelResultsPhotos).toString()){
			return NightlifeModelResultsPhotos().fromJson(json);
		}
		if(type == (NightlifeModelResultsPlusCode).toString()){
			return NightlifeModelResultsPlusCode().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<NightlifeModelEntity>[] is M){
			return data.map<NightlifeModelEntity>((e) => NightlifeModelEntity().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResults>[] is M){
			return data.map<NightlifeModelResults>((e) => NightlifeModelResults().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsGeometry>[] is M){
			return data.map<NightlifeModelResultsGeometry>((e) => NightlifeModelResultsGeometry().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsGeometryLocation>[] is M){
			return data.map<NightlifeModelResultsGeometryLocation>((e) => NightlifeModelResultsGeometryLocation().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsGeometryViewport>[] is M){
			return data.map<NightlifeModelResultsGeometryViewport>((e) => NightlifeModelResultsGeometryViewport().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsGeometryViewportNortheast>[] is M){
			return data.map<NightlifeModelResultsGeometryViewportNortheast>((e) => NightlifeModelResultsGeometryViewportNortheast().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsGeometryViewportSouthwest>[] is M){
			return data.map<NightlifeModelResultsGeometryViewportSouthwest>((e) => NightlifeModelResultsGeometryViewportSouthwest().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsOpeningHours>[] is M){
			return data.map<NightlifeModelResultsOpeningHours>((e) => NightlifeModelResultsOpeningHours().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsPhotos>[] is M){
			return data.map<NightlifeModelResultsPhotos>((e) => NightlifeModelResultsPhotos().fromJson(e)).toList() as M;
		}
		if(<NightlifeModelResultsPlusCode>[] is M){
			return data.map<NightlifeModelResultsPlusCode>((e) => NightlifeModelResultsPlusCode().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}